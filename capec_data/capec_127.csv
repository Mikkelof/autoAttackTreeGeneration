ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
127,Directory Indexing,Detailed,Draft,"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",,High,Medium,::NATURE:ChildOf:CAPEC ID:54::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.:TECHNIQUE:Send requests to the web server for common directory names:TECHNIQUE:If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.:TECHNIQUE:Search for uncommon or potentially user created directories that may be present.::STEP:2:PHASE:Experiment:DESCRIPTION:[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods:TECHNIQUE:Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.:TECHNIQUE:Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.:TECHNIQUE:Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.:TECHNIQUE:Sequentially request a list of common base files to each directory discovered.:TECHNIQUE:Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a / request::STEP:3:PHASE:Exploit:DESCRIPTION:[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods:TECHNIQUE:Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a / request:TECHNIQUE:Try other known exploits to elevate privileges sufficient to bypass protected directories.:TECHNIQUE:List the files in the directory by issuing a request with the URL ending in a / slash.:TECHNIQUE:Access the files via direct URL and capture contents.:TECHNIQUE:Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.:TECHNIQUE:Sequentially request a list of common base files to each directory discovered.::",::The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.::The adversary must be able to control the path that is requested of the target.::The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.::The server version or patch level must not inherently prevent known directory listing attacks from working.::,::SKILL:To issue the request to URL without given a specific file name:LEVEL:Low::SKILL:To bypass the access control of the directory of listings:LEVEL:High::,::Ability to send HTTP requests to a web application.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage::,"::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::","::The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80 The target application does not have direct hyperlink to the backup directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a db_dump.php file in it. This sensitive data should not be disclosed publicly.::",::424::425::288::285::732::276::693::,TAXONOMY NAME:ATTACK:ENTRY ID:1083:ENTRY NAME:File and Directory Discovery::,,
