ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
692,Spoof Version Control System Commit Metadata,Detailed,Stable,"An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g., Git) repository's commits to deceive users into believing that the maliciously provided software is frequently maintained and originates from a trusted source.",,Medium,High,::NATURE:ChildOf:CAPEC ID:691::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target] The adversary must first identify a target repository for them to spoof. Typically, this will be a popular and widely used repository, as to increase the amount of victims a successful attack will exploit.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create malicious repository] The adversary must create a malicious repository that imitates the legitimate repository being spoofed. This may include creating a username that closely matches the legitimate repository owner; creating a repository name that closely matches the legitimate repository name; uploading the legitimate source code; and more.::STEP:3:PHASE:Experiment:DESCRIPTION:[Spoof commit metadata] Once the malicious repository has been created, the adversary must then spoof the commit metadata to make the repository appear to be frequently maintained and originating from trusted sources.:TECHNIQUE:Git Commit Timestamps: The adversary generates numerous fake commits while setting the GIT_AUTHOR_DATE and GIT_COMMITTER_DATE environment variables to a date which is to be spoofed.:TECHNIQUE:Git Commit Contributors: The adversary obtains a legitimate and trusted user's email address and then sets this information via the git config command. The adversary can then commit changes leveraging this username.::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit victims] The adversary infiltrates software and/or system environments with the goal of conducting additional attacks.:TECHNIQUE:Active: The adversary attempts to trick victims into downloading the malicious software by means such as phishing and social engineering.:TECHNIQUE:Passive: The adversary waits for victims to download and leverage malicious software.::",::Identification of a popular open-source repository whose metadata is to be spoofed.::,::SKILL:Ability to spoof a variety of repository metadata to convince victims the source is trusted.:LEVEL:Medium::,,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::,"::Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.::Reference vulnerability databases to determine if the software contains known vulnerabilities.::Only download open-source software from reputable hosting sites or package managers.::Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.::After downloading open-source software, ensure integrity values have not changed.::Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.::","::In July 2022, Checkmarx reported that GitHub commit metadata could be spoofed if unsigned commits were leveraged by the repository. Adversaries were able to spoof commit contributors, as well as the date/time of the commit. This resulted in commits appearing to originate from trusted developers and a GitHub activity graph that duped users into believing that the repository had been maintained for a significant period of time. The lack of commit metadata validation ultimately allowed adversaries to propagate malware to unsuspecting victims [REF-719] [REF-720].::",::494::,,
