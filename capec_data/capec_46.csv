ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
46,Overflow Variables and Tags,Detailed,Draft,"This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.",,High,High,::NATURE:ChildOf:CAPEC ID:100::NATURE:PeerOf:CAPEC ID:8::NATURE:PeerOf:CAPEC ID:10::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries look for applications or programs that accept formatted files, such as configuration files, as input.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:Knowing the type of file that an application takes as input, the adversary takes a normal input file and modifies a single variable or tag to contain a large amount of data. If there is a crash, this means that a buffer overflow attack is possible. The adversary will keep changing single variables or tags one by one until they see a change in behavior.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] The adversary will upload the crafted file to the application, causing a buffer overflow.::",::The target program consumes user-controllable data in the form of tags or variables.::The target program does not perform sufficient boundary checking.::,::SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::,,,::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,"::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::Do not trust input data from user. Validate all user input.::",::A buffer overflow vulnerability exists in the Yamaha MidiPlug that can be accessed via a Text variable found in an EMBED tag.See also: CVE-1999-0946::A buffer overflow in Exim allows local users to gain root privileges by providing a long :include: option in a .forward file.See also: CVE-1999-0971::,::120::118::119::74::20::680::733::697::,,,
