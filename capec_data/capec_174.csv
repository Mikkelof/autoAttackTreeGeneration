ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
174,Flash Parameter Injection,Detailed,Draft,An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.,,High,Medium,::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Spider] Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash files. If there is an embedded Flash file, they list how to pass global parameters to the Flash file from the embedding object.:TECHNIQUE:Use an automated tool to record all instances of URLs which have embedded Flash files and list the parameters passing to the Flash file.:TECHNIQUE:Use a browser to manually explore the website to see whether the HTML document has embedded Flash files or not and list the parameters passing to the Flash file.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine the application susceptibility to Flash parameter injection] Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the adversary attempts to use various techniques such as DOM based, reflected, flashvars, and persistent attacks depending on the type of parameter passed to the embedded Flash file.:TECHNIQUE:When the JavaScript 'document.location' variable is used as part of the parameter, inject '#' and the payload into the parameter in the URL.:TECHNIQUE:When the name of the Flash file is exposed as a form or a URL parameter, the adversary injects '?' and the payload after the file name in the URL to override some global value.:TECHNIQUE:When the arguments passed in the 'flashvars' attributes, the adversary injects '&' and payload in the URL.:TECHNIQUE:If some of the attributes of the <object> tag are received as parameters, the 'flashvars' attribute is injected into the <object> tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file.:TECHNIQUE:If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash file is loaded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute Flash Parameter Injection Attack] Inject parameters into Flash file. Based on the results of the Experiment phase, the adversary crafts the underlying malicious URL containing injected Flash parameters and submits it to the web server. Once the web server receives the request, the embedding HTML document will controllable by the adversary.:TECHNIQUE:Craft underlying malicious URL and send it to the web server to take control of the embedding HTML document.::",,::SKILL:The adversary need inject values into the global parameters to the Flash file and understand the parent HTML document DOM structure. The adversary needs to be smart enough to convince the victim to click on their crafted link.:LEVEL:Medium::,::The adversary must convince the victim to click their crafted link.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::,"::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::","::The following are examples for different types of parameters passed to the Flash file. DOM-based Flash parameter injection <object><embed src=myFlash.swf flashvars=location=http://example.com/index.htm#&globalVar=e-v-i-l></embed></object> Passing parameter in an embedded URI <object type=application/x-shockwave-flash data=myfile.swf?globalVar=e-v-i-l ></object> Passing parameter in flashvars <object type=application/x-shockwafile.swf ve-flash data=my flashvars=language=English&globalVar=e-v-i-l></object> Persistent Flash Parameter Injection // Create a new shared object or read an existing one mySharedObject = SharedObject.getLocal(flashToLoad);if (_root.flashfile == undefined) { // Check whether there is a shared object saved if (mySharedObject.data.flash == null) { // Set a default value _root.flashfile = defaultFlash.swf; } else { // Read the flash file to load from the shared object _root.flashfile = mySharedObject.data.flash; } } // Store the flash file's name in the shared object mySharedObject.data.flash = _root.flashfile; // Load the flash file getURL(_root.flashfile); If an unsuspecting user is lured by an adversary to click on link like this: http://example.com/vulnerable.swf?flashfile=javascript:alert(document.domain) The result will be not merely a one-time execution of the JavaScript code in the victim's browser in the context of the domain with the vulnerable Flash file, but every time the Flash is loaded, whether by direct reference or embedded inside the same domain, the JavaScript will be executed again.::",::88::,,
