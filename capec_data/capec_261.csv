ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
261,Fuzzing for garnering other adjacent user/sensitive data,Detailed,Draft,An adversary who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide.,,,Medium,::NATURE:ChildOf:CAPEC ID:54::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.:TECHNIQUE:Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.:TECHNIQUE:Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.:TECHNIQUE:Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)::STEP:2:PHASE:Experiment:DESCRIPTION:[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.:TECHNIQUE:Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).:TECHNIQUE:Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.::STEP:3:PHASE:Experiment:DESCRIPTION:[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that either provide user/sensitive data or give information about an expected template that could be used to produce this data.::STEP:4:PHASE:Exploit:DESCRIPTION:[Craft exploit payloads] If the logs did not reveal any user/sensitive data, an adversary will attempt to make the fuzzing inputs form to an expected template:TECHNIQUE:Create variants of expected templates that request additional information:TECHNIQUE:Create variants that exclude limiting clauses:TECHNIQUE:Create variants that alter fields taht identify the requester in order to subvert access controls:TECHNIQUE:Repeat different fuzzing variants until sensitive information is divulged::",::The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates.::,,"::The attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries.::",,,,"::A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries.::",::20::,,,
