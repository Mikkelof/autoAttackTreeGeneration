ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
592,Stored XSS,Detailed,Stable,An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently stored within the data storage of a vulnerable web application as valid input.,,High,Very High,::NATURE:ChildOf:CAPEC ID:63::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application. The adversary is looking for areas where user input is stored, such as user profiles, shopping carts, file managers, forums, blogs, and logs.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for stored XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings to submit script in input fields that could be stored by the web application. If possible, the probe strings contain a unique identifier so they can be queried for after submitting to see if they are stored.:TECHNIQUE:Use a list of HTML special characters to submit in input fields that could be stored by the web application and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Store malicious XSS content] Once the adversary has determined which stored locations are vulnerable to XSS, they will interact with the web application to store the malicious content. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.:TECHNIQUE:Store a malicious script on a page that will execute when viewed by the victim.:TECHNIQUE:Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.:TECHNIQUE:Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.:TECHNIQUE:Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.::",::An application that leverages a client-side web browser with scripting enabled.::An application that fails to adequately sanitize or encode untrusted input.::An application that stores information provided by the user in data storage of some kind.::,::SKILL:Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application.:LEVEL:Medium::,::None: No specialized resources are required to execute this type of attack.::,,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Stored XSS attack can enable an adversary to exfiltrate sensitive information from the application.::SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Stored XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Stored XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Stored XSS attack can allow an adversary to tamper with application data.::","::Use browser technologies that do not allow client-side scripting.::Utilize strict type, character, and encoding enforcement.::Ensure that all user-supplied input is validated before being stored.::","::An adversary determines that a system uses a web based interface for administration. The adversary creates a new user record and supplies a malicious script in the user name field. The user name field is not validated by the system and a new log entry is created detailing the creation of the new user. Later, an administrator reviews the log in the administrative console. When the administrator comes across the new user entry, the browser sees a script and executes it, stealing the administrator's authentication cookie and forwarding it to the adversary. An adversary then uses the received authentication cookie to log in to the system as an administrator, provided that the administrator console can be accessed remotely.::An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. An adversary embeds JavaScript in the image tags of their message. The adversary then sends the victim an email advertising free goods and provides a link to the form for how to collect. When the victim visits the forum and reads the message, the malicious script is executed within the victim's browser.::",::79::,,,
