ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
182,Flash Injection,Standard,Draft,"An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.",,High,Medium,::NATURE:ChildOf:CAPEC ID:137::NATURE:ParentOf:CAPEC ID:174::NATURE:ParentOf:CAPEC ID:178::NATURE:CanAlsoBe:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find Injection Entry Points] The attacker first takes an inventory of the entry points of the application.:TECHNIQUE:Spider the website for all available URLs that reference a Flash application.:TECHNIQUE:List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine the application's susceptibility to Flash injection] Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.:TECHNIQUE:Test the page using direct load asfunction, getURL,javascript:gotRoot()///d.jpg:TECHNIQUE:Test the page using controlled evil page/host, http://example.com/evil.swf:TECHNIQUE:Test the page using Flash HTML injection, '><img src='asfunction:getURL,javascript:gotRoot()//.jpg' >:TECHNIQUE:Test the page using DOM injection, (gotRoot(''))::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject malicious content into target] Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase::","::The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.::","::SKILL:The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.:LEVEL:Medium::",::None: No specialized resources are required to execute this type of attack. The attacker may need to be able to serve the injected Flash content.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::,::Implementation: remove sensitive information such as user name and password in the SWF file.::Implementation: use validation on both client and server side.::Implementation: remove debug information.::Implementation: use SSL when loading external data::Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.::,"::In the following example, the SWF file contains getURL('javascript:SomeFunc(someValue)','','GET') A request like http://example.com/noundef.swf?a=0:0;alert('XSS') becomes javascript:SomeFunc(someValue)?a=0:0;alert(123)::",::20::184::697::,,
