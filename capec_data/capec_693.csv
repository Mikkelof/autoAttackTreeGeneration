ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
693,StarJacking,Detailed,Stable,An adversary spoofs software popularity metadata to deceive users into believing that a maliciously provided package is widely used and originates from a trusted source.,,Medium,High,::NATURE:ChildOf:CAPEC ID:691::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target] The adversary must first identify a target package whose popularity statistics will be leveraged. This will be a popular and widely used package, as to increase the perceived pedigree of the malicious package.::STEP:2:PHASE:Experiment:DESCRIPTION:[Spoof package popularity] The adversary provides their malicious package to a package manager and uses the source code repository URL identified in Step 1 to spoof the popularity of the package. This malicious package may also closely resemble the legitimate package whose statistics are being utilized.::STEP:3:PHASE:Exploit:DESCRIPTION:[Exploit victims] The adversary infiltrates development environments with the goal of conducting additional attacks.:TECHNIQUE:Active: The adversary attempts to trick victims into downloading the malicious package by means such as phishing and social engineering.:TECHNIQUE:Passive: The adversary waits for victims to download and leverage the malicious package.::",::Identification of a popular open-source package whose popularity metadata is to be used for the malicious package.::,::SKILL:Ability to provide a package to a package manager and associate a popular package's source code repository URL.:LEVEL:Low::,,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::,"::Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.::Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.::Reference vulnerability databases to determine if the software contains known vulnerabilities.::Only download open-source packages from reputable package managers.::After downloading open-source packages, ensure integrity values have not changed.::Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.::","::In April 2022, Checkmarx reported that packages hosted on NPM, PyPi, and Yarn do not properly validate that the provided GitHub repository URL actually pertains to the package being provided. Combined with additional attacks such as TypoSquatting, this allows adversaries to spoof popularity metadata by associating popular GitHub repository URLs with the malicious package. This can further lead to developers unintentionally including the malicious package within their development environments [REF-721].::",::494::,,,
