ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
661,Root/Jailbreak Detection Evasion via Debugging,Detailed,Stable,"An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",,Medium,Very High,::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).:TECHNIQUE:Search application stores for mobile applications worth exploiting::STEP:2:PHASE:Experiment:DESCRIPTION:[Debug the target application] The adversary inserts the debugger into the program entry point of the mobile application, after the application's signature has been identified, to dump its memory contents.:TECHNIQUE:Insert the debugger at the mobile application's program entry point, after the application's signature has been identified.:TECHNIQUE:Dump the memory region containing the now decrypted code from the address space of the binary.::STEP:3:PHASE:Experiment:DESCRIPTION:[Remove application signature verification methods] Remove signature verification methods from the decrypted code and resign the application with a self-signed certificate.::STEP:4:PHASE:Exploit:DESCRIPTION:[Execute the application and evade Root/Jailbreak detection methods] The application executes with the self-signed certificate, while believing it contains a trusted certificate. This now allows the adversary to evade Root/Jailbreak detection via code hooking or other methods.:TECHNIQUE:Optional: Hook code into the target application.::",::A debugger must be able to be inserted into the targeted application.::,::SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:High::SKILL:Knowledge about runtime debugging.:LEVEL:Medium::,::The adversary must have a Rooted/Jailbroken mobile device with debugging capabilities.::,,"::SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Debugging, the adversary compromises the integrity of the application.::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Debugging in order to obtain sensitive information.::",::Instantiate checks within the application code that ensures debuggers are not attached.::,"::An adversary targets an iOS banking application in an attempt to compromise sensitive user data. The adversary launches the application with the iOS debugger and sets a breakpoint at the program entry point, after the application's signature has been verified. Next, the adversary dumps the memory region that contains the decrypted code from the address space of the binary. The 'Restrict' flag is then stripped from the application and the adversary resigns the application with a self-signed certificate. The application is now executed without the 'Restrict' flag, while trusting the self-signed certificate to be legitimate. However, the adversary is now able to evaded Jailbreak detection via code hooking or other methods and can glean user credentials and/or transaction details.::",::489::,,,
