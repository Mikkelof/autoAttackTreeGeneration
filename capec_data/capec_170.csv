ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
170,Web Application Fingerprinting,Detailed,Draft,"An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",,High,Low,::NATURE:ChildOf:CAPEC ID:541::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Request fingerprinting] Use automated tools or send web server specific commands to web server and wait for server's response.:TECHNIQUE:Use automated tools or send web server specific commands to web server and then receive server's response.::STEP:2:PHASE:Experiment:DESCRIPTION:[Increase the accuracy of server fingerprinting of Web servers] Attacker usually needs to send several different commands to accurately identify the web server. Attacker can also use automated tools to send requests to the server. The responses of the server may be different in terms of protocol behavior.:TECHNIQUE:Observe the ordering of the several HTTP response headers. The ordering of the header of each server may have unique identities.:TECHNIQUE:Send bad requests or requests of nonexistent pages to the server.:TECHNIQUE:Attacker takes existing automated tools to recognize the type and the version of the web server in use.::STEP:3:PHASE:Experiment:DESCRIPTION:[Identify Web Application Software] After the web server platform software has been identified, the attacker start to identify web application technologies such as ASP, .NET, PHP and Java on the server.:TECHNIQUE:Examine the file name extensions in URL, for example .php indicates PHP script interfaced with Apache server.:TECHNIQUE:Examine the HTTP Response Headers. This may leak information about software signatures:TECHNIQUE:Examine Cookies that may contain server's software information.:TECHNIQUE:Check error pages.::STEP:4:PHASE:Experiment:DESCRIPTION:[Identify Backend Database Version] Determining the database engine type can assist attackers' attempt to successfully execute SQL injection. Some database API such as ODBC will show a database type as part of the driver information when reporting an error.:TECHNIQUE:Use tools to send bogus SQL query to the server and check error pages.::","::Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.::","::SKILL:Attacker knows how to send HTTP request, SQL query to a web application.:LEVEL:Low::","::While simple fingerprinting can be accomplished with only a web browser, for more thorough fingerprinting an attacker requires a variety of tools to collect information about the target. These tools might include protocol analyzers, web-site crawlers, and fuzzing tools. Footprinting a service adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::,::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::,"::An attacker sends malformed requests or requests of nonexistent pages to the server. Consider the following HTTP responses. Response from Apache 1.3.23 $ nc apache.server.com80 GET / HTTP/3.0 HTTP/1.1 400 Bad RequestDate: Sun, 15 Jun 2003 17:12: 37 GMTServer: Apache/1.3.23Connection: closeTransfer: chunkedContent-Type: text/HTML; charset=iso-8859-1 Response from IIS 5.0 $ nc iis.server.com 80GET / HTTP/3.0 HTTP/1.1 200 OKServer: Microsoft-IIS/5.0Content-Location: http://iis.example.com/Default.htmDate: Fri, 01 Jan 1999 20:14: 02 GMTContent-Type: text/HTMLAccept-Ranges: bytes Last-Modified: Fri, 01 Jan 1999 20:14: 02 GMTETag: W/e0d362a4c335be1: ae1Content-Length: 133 [REF-37]::",::497::,,,
