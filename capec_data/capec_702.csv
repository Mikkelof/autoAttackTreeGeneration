ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
702,Exploiting Incorrect Chaining or Granularity of Hardware Debug Components,Detailed,Draft,An adversary exploits incorrect chaining or granularity of hardware debug components in order to gain unauthorized access to debug functionality on a chip. This happens when authorization is not checked on a per function basis and is assumed for a chain or group of debug functionality.,,Low,Medium,::NATURE:ChildOf:CAPEC ID:180::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find and scan debug interface] The adversary must first find and scan a debug interface to determine what they are authorized to use and what devices are chained to that interface.:TECHNIQUE:Use a JTAGulator on a JTAG interface to determine the correct pin configuration, baud rate, and number of devices in the chain::STEP:2:PHASE:Experiment:DESCRIPTION:[Connect to debug interface] The adversary next connects a device to the JTAG interface using the properties found in the explore phase so that they can send commands. The adversary sends some test commands to make sure the connection is working.:TECHNIQUE:Connect a device such as a BusPirate or UM232H to the JTAG interface and connect using pin layout found from the JTAGulator::STEP:3:PHASE:Exploit:DESCRIPTION:[Move along debug chain] Once the adversary has connected to the main TAP, or JTAG interface, they will move along the TAP chain to see what debug interfaces might be available on that chain.:TECHNIQUE:Run a command such as “scan_chain” to see what TAPs are available in the chain.::",::Hardware device has an exposed debug interface::,::SKILL:Ability to identify physical debug interfaces on a device:LEVEL:Medium::SKILL:Ability to operate devices to scan and connect to an exposed debug interface:LEVEL:Medium::,"::A device to scan a TAP or JTAG interface, such as a JTAGulator::A device to communicate on a TAP or JTAG interface, such as a BusPirate::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Implement: Ensure that debug components are properly chained, and their granularity is maintained at different authorization levels::Perform Post-silicon validation tests at various authorization levels to ensure that debug components are only accessible to authorized users::","::A System-on-Chip (SoC) might give regular users access to the SoC-level TAP, but does not want to give access to all of the internal TAPs (e.g., Core). If any of the internal TAPs were incorrectly chained to the SoC-level TAP, this would grant regular users access to the internal TAPs and allow them to execute commands there.::Suppose there is a hierarchy of TAPs (TAP_A is connected to TAP_B and TAP_C, then TAP_B is connected to TAP_D and TAP_E, then TAP_C is connected to TAP_F and TAP_G, etc.). Architecture mandates that the user have one set of credentials for just accessing TAP_A, another set of credentials for accessing TAP_B and TAP_C, etc. However, if, during implementation, the designer mistakenly implements a daisy-chained TAP where all the TAPs are connected in a single TAP chain without the hierarchical structure, the correct granularity of debug components is not implemented, and the attacker can gain unauthorized access.::",::1296::,,,
