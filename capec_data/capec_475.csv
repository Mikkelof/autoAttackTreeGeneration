ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
475,Signature Spoofing by Improper Validation,Detailed,Draft,An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.,,Low,High,::NATURE:ChildOf:CAPEC ID:473::NATURE:CanPrecede:CAPEC ID:542::,,"::Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms.::",::SKILL:Cryptanalysis of signature verification algorithm:LEVEL:High::SKILL:Reverse engineering and cryptanalysis of signature verification algorithm implementation:LEVEL:High::,,,,::Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.::,"::The Windows CryptoAPI (Crypt32.dll) was shown to be vulnerable to signature spoofing by failing to properly validate Elliptic Curve Cryptography (ECC) certificates. If the CryptoAPI's signature validator allows the specification of a nonstandard base point (G): An adversary can create a custom ECDSA certificate with an elliptic curve (ECC) signature that appears to match a known standard curve, like P-256 that includes a public key for an existing known trusted certificate authority, but which was in fact not signed by that certificate authority. Windows checks the public key and other curve parameters, but not the (bespoke adversary-supplied) base point generator (G) parameter constant which actually generated the curve [REF-562]. Exploiting this vulnerability allows the adversary to leverage a spoofed certificate to dupe trusted network connections and deliver/execute malicious code, while appearing as legitimately trusted entity [REF-563]. This ultimately tricks the victim into believing the malicious website or executable is legitimate and originates from a properly verified source. See also: CVE-2020-0601::",::347::327::295::,,,
