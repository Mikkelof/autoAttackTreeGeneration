ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
500,WebView Injection,Detailed,Draft,"An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.",,,,::NATURE:ChildOf:CAPEC ID:253::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target web application] An adversary first needs to determine what web application they wish to target.:TECHNIQUE:Target web applications that require users to enter sensitive information.:TECHNIQUE:Target web applications that an adversary wishes to operate on behalf of a logged in user.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create malicious application] An adversary creates an application, often mobile, that incorporates a WebView component to display the targeted web application. This malicious application needs to downloaded by a user, so adversaries will make this application useful in some way.:TECHNIQUE:Create a 3rd party application that adds useful functionality to the targeted web application. Victims will download the application as a means of using the targeted web application.:TECHNIQUE:Create a fun game that at some point directs a user to the targeted web application. For example, prompt the user to buy in game currency by directing them to PayPal.::STEP:3:PHASE:Experiment:DESCRIPTION:[Get the victim to download and run the application] An adversary needs to get the victim to willingly download and run the application.:TECHNIQUE:Pay for App Store advertisements:TECHNIQUE:Promote the application on social media, either through accounts made by the adversary or by paying for other accounts to advertise.::STEP:4:PHASE:Exploit:DESCRIPTION:[Inject malicious code] Once the victim runs the malicious application and views the targeted web page in the WebView component, the malicious application will inject malicious JavaScript code into the web application. This is done by using WebView's loadURL() API, which can inject arbitrary JavaScript code into pages loaded by the WebView component with the same privileges. This is often done by adding a script tag to the document body with a src destination to a remote location that serves malicious JavaScript code.:TECHNIQUE:Execute operations on the targeted web page on behalf of an authenticated user.:TECHNIQUE:Steal cookie information from the victim.:TECHNIQUE:Add in extra fields to the DOM in an attempt to get a user to divulge sensitive information.::","::An adversary must be able install a purpose built malicious application onto the device and convince the user to execute it. The malicious application is designed to target a specific web application and is used to load the target web pages via the WebView component. For example, an adversary may develop an application that interacts with Facebook via WebView and adds a new feature that a user desires. The user would install this 3rd party app instead of the Facebook app.::",,,,,::The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.::,,::749::940::,,,
