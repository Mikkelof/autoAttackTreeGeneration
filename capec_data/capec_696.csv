ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
696,Load Value Injection,Detailed,Draft,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",,Low,Very High,::NATURE:ChildOf:CAPEC ID:663::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey target application and relevant OS shared code libraries] Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack. The adversary looks for code gadgets which will allow them to load an adversary-controlled value into trusted memory. They also look for code gadgets which might operate on this controlled value.:TECHNIQUE:Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system.::STEP:2:PHASE:Experiment:DESCRIPTION:[Fill microarchitectural buffer with controlled value] The adversary will utilize the found code gadget from the previous step to load a value into a microarchitectural buffer.:TECHNIQUE:The adversary may choose the controlled value to be memory address of sensitive information that they want the system to access:TECHNIQUE:The adversary may choose the controlled value to be the memory address of other code gadgets that they wish to execute by hijacking the control flow of the system::STEP:3:PHASE:Experiment:DESCRIPTION:[Set up instruction to page fault or microcode assist] The adversary must manipulate the system such that a page fault or microcode assist occurs when a valid instruction is run. If the instruction that fails is near where the adversary-controlled value was loaded, the system may forward this value from the microarchitectural buffer incorrectly.:TECHNIQUE:When targeting Intel SGX enclaves, adversaries that have privileges can manipulate PTEs to provoke page-fault exceptions or microcode assists.:TECHNIQUE:When targeting Intel SGX enclaves, adversaries can indirectly revoke permissions for enclave code through the “mprotect” system call:TECHNIQUE:An adversary can evict selected virtual memory pages using legacy interfaces or by increasing physical memory utilization:TECHNIQUE:When attacking a Windows machine, wait until the OS clears the PTE accessed bit. When the page is next accessed, the CPU will always issue a microcode assist for re-setting this bit::STEP:4:PHASE:Exploit:DESCRIPTION:[Operate on adversary-controlled data] Once the attack has been set up and the page fault or microcode assist occurs, the system operates on the adversary-controlled data.:TECHNIQUE:Influence the system to load sensitive information into microarchitectural state which can be read by the adversary using a code gadget.:TECHNIQUE:Hijack execution by jumping to second stage gadgets found in the address space. By utilizing return-oriented programming, this can chain gadgets together and allow the adversary to execute a sequence of gadgets.::",::The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.::The CPU incorrectly transiently forwards values from microarchitectural buffers after faulting or assisted loads::The adversary needs the ability to induce page faults or microcode assists on the target system.::Code gadgets exist that allow the adversary to hijack transient execution and encode secrets into the microarchitectural state.::,"::SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:High::SKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:High::SKILL:The ability to provoke faulting or assisted loads in legitimate execution.:LEVEL:High::",,::File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution::,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::,"::Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.::Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.::",,::1342::,,
