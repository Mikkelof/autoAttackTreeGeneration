ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
159,Redirect Access to Libraries,Standard,Stable,"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",,High,Very High,::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] The adversary identifies the target application and determines what libraries are being used.:TECHNIQUE:Find public source code and identify library dependencies.:TECHNIQUE:Gain access to the system hosting the application and look for libraries in common locations.::STEP:2:PHASE:Experiment:DESCRIPTION:[Deploy Malicious Libraries] The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect Library Calls to Malicious Library] Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.:TECHNIQUE:Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location:TECHNIQUE:Create a symlink that tricks the application into thinking that a malicious library is the legitimate library.:TECHNIQUE:Use DLL side-loading to place a malicious verison of a DLL in the windows directory.::",::The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.::,::SKILL:To modify the entries in the configuration file pointing to malicious libraries:LEVEL:Low::SKILL:To force symlink and timing issues for redirecting access to libraries:LEVEL:Medium::SKILL:To reverse engineering the libraries and inject malicious code into the libraries:LEVEL:High::,,,::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::,::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::,"::In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... • mark the text segment writeable • save the PLT(GOT) entry • replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... • do the payload of the new lib call • restore the original PLT(GOT) entry • call the lib call • save the PLT(GOT) entry again (if its changed) • replace the PLT(GOT) entry with the address of the new lib call::",::706::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.008:ENTRY NAME:Hijack Execution Flow:Path Interception by Search Order Hijacking::,,
