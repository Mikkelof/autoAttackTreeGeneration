CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
607,Public Static Final Field References Mutable Object,Variant,Draft,"A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.",,::NATURE:ChildOf:CWE ID:471:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,,,::PHASE:Implementation::,,,::SCOPE:Integrity:IMPACT:Modify Application Data::,"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::",::PHASE:Implementation:DESCRIPTION:Protect mutable objects by making them private. Restrict access to the getter and setter as well.::,,,,::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::,,,
