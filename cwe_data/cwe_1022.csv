CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
1022,Use of Web Link to Untrusted Target with window.opener Access,Variant,Incomplete,"The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.","When a user clicks a link to an external site (target), the target=_blank attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link. If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin. An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection.",::NATURE:ChildOf:CWE ID:266:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE NAME:JavaScript:LANGUAGE PREVALENCE:Often::TECHNOLOGY CLASS:Web Based:TECHNOLOGY PREVALENCE:Often::,,::TERM:tabnabbing::,::PHASE:Architecture and Design:NOTE:This weakness is introduced during the design of an application when the architect does not specify that a linked external document should not be able to alter the location of the calling page.::PHASE:Implementation:NOTE:This weakness is introduced during the coding of an application when the developer does not include the noopener and/or noreferrer value for the rel attribute.::,,,::SCOPE:Confidentiality:IMPACT:Alter Execution Logic:NOTE:The user may be redirected to an untrusted page that contains undesired content or malicious script code.::,"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Architecture and Design:DESCRIPTION:Specify in the design that any linked external document must not be granted access to the location object of the calling page.::PHASE:Implementation:DESCRIPTION:When creating a link to an external document using the <a> tag with a defined target, for example _blank or a named frame, provide the rel attribute with a value noopener noreferrer. If opening the external document in a new window via javascript, then reset the opener by setting it equal to null.::PHASE:Implementation:DESCRIPTION:Do not use _blank targets. However, this can affect the usability of the application.::","::REFERENCE:CVE-2022-4927:DESCRIPTION:Library software does not use rel: noopener noreferrer setting, allowing tabnabbing attacks to redirect to a malicious page:LINK:https://www.cve.org/CVERecord?id=CVE-2022-4927::",,,,,,
