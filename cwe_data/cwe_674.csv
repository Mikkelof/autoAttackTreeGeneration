CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
674,Uncontrolled Recursion,Class,Draft,"The product does not properly control the amount of recursion that takes place, consuming excessive resources, such as allocated memory or the program stack.",,::NATURE:ChildOf:CWE ID:834:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,,::TERM:Stack Exhaustion::,::PHASE:Implementation:NOTE:The uncontrolled recursion is often due to an improper or missing conditional::,,,"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):NOTE:Resources including CPU, memory, and stack memory could be rapidly consumed or exhausted, eventually leading to an exit or crash.::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:In some cases, an application's interpreter might kill a process or thread that appears to be consuming too much resources, such as with PHP's memory_limit setting. When the interpreter kills the process/thread, it might report an error containing detailed information such as the application's installation path.::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::",::PHASE:Implementation:DESCRIPTION:Ensure an end condition will be reached under all logic conditions. The end condition may include testing against the depth of recursion and exiting with an error if the recursion goes too deep. The complexity of the end condition contributes to the effectiveness of this action.:EFFECTIVENESS:Moderate::PHASE:Implementation:DESCRIPTION:Increase the stack size.:EFFECTIVENESS:Limited::,::REFERENCE:CVE-2007-1285:DESCRIPTION:Deeply nested arrays trigger stack exhaustion.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1285::REFERENCE:CVE-2007-3409:DESCRIPTION:Self-referencing pointers create infinite loop and resultant stack exhaustion.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3409::REFERENCE:CVE-2016-10707:DESCRIPTION:Javascript application accidentally changes input in a way that prevents a recursive call from detecting an exit condition.:LINK:https://www.cve.org/CVERecord?id=CVE-2016-10707::REFERENCE:CVE-2016-3627:DESCRIPTION:An attempt to recover a corrupted XML file infinite recursion protection counter was not always incremented missing the exit condition.:LINK:https://www.cve.org/CVERecord?id=CVE-2016-3627::REFERENCE:CVE-2019-15118:DESCRIPTION:USB-audio driver's descriptor code parsing allows unlimited recursion leading to stack exhaustion.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-15118::,,::CPU::,::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A9:ENTRY NAME:Denial of Service:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP13:ENTRY NAME:Unrestricted Consumption::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-CWE-674::,::230::231::,,
