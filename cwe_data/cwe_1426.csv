CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
1426,Improper Validation of Generative AI Output,Base,Incomplete,"The product invokes a generative AI/ML component whose behaviors and outputs cannot be directly controlled, but the product does not validate or insufficiently validates the outputs to ensure that they align with the intended security, content, or privacy policy.",,::NATURE:ChildOf:CWE ID:707:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:AI/ML:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,,,"::PHASE:Architecture and Design:NOTE:Developers may rely heavily on protection mechanisms such as input filtering and model alignment, assuming they are more effective than they actually are.::PHASE:Implementation:NOTE:Developers may rely heavily on protection mechanisms such as input filtering and model alignment, assuming they are more effective than they actually are.::",,,"::SCOPE:Integrity:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Varies by Context:NOTE:In an agent-oriented setting, output could be used to cause unpredictable agent invocation, i.e., to control or influence agents that might be invoked from the output. The impact varies depending on the access that is granted to the tools, such as creating a database or writing files.::","::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:Use known techniques for prompt injection and other attacks, and adjust the attacks to be more specific to the model or system.::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:Use known techniques for prompt injection and other attacks, and adjust the attacks to be more specific to the model or system.::METHOD:Architecture or Design Review:DESCRIPTION:Review of the product design can be effective, but it works best in conjunction with dynamic analysis.::","::PHASE:Architecture and Design:DESCRIPTION:Since the output from a generative AI component (such as an LLM) cannot be trusted, ensure that it operates in an untrusted or non-privileged space.::PHASE:Operation:DESCRIPTION:Use semantic comparators, which are mechanisms that provide semantic comparison to identify objects that might appear different but are semantically similar.::PHASE:Operation:DESCRIPTION:Use components that operate externally to the system to monitor the output and act as a moderator. These components are called different terms, such as supervisors or guardrails.::PHASE:Build and Compilation:DESCRIPTION:During model training, use an appropriate variety of good and bad examples to guide preferred outputs.::","::REFERENCE:CVE-2024-3402:DESCRIPTION:chain: GUI for ChatGPT API performs input validation but does not properly sanitize or validate model output data (CWE-1426), leading to XSS (CWE-79).:LINK:https://www.cve.org/CVERecord?id=CVE-2024-3402::",,,,,"::TYPE:Research Gap:NOTE:This entry is related to AI/ML, which is not well understood from a weakness perspective. Typically, for new/emerging technologies including AI/ML, early vulnerability discovery and research does not focus on root cause analysis (i.e., weakness identification). For AI/ML, the recent focus has been on attacks and exploitation methods, technical impacts, and mitigations. As a result, closer research or focused efforts by SMEs is necessary to understand the underlying weaknesses. Diverse and dynamic terminology and rapidly-evolving technology further complicate understanding. Finally, there might not be enough real-world examples with sufficient details from which weakness patterns may be discovered. For example, many real-world vulnerabilities related to prompt injection appear to be related to typical injection-style attacks in which the only difference is that the input to the vulnerable component comes from model output instead of direct adversary input, similar to second-order SQL injection attacks.::TYPE:Maintenance:NOTE:This entry was created by members of the CWE AI Working Group during June and July 2024. The CWE Project Lead, CWE Technical Lead, AI WG co-chairs, and many WG members decided that for purposes of timeliness, it would be more helpful to the CWE community to publish the new entry in CWE 4.15 quickly and add to it in subsequent versions.::",
