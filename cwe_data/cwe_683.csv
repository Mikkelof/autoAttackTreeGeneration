CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
683,Function Call With Incorrect Order of Arguments,Variant,Draft,"The product calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.","While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers or types of arguments, such as format strings in C. It also can occur in languages or environments that do not enforce strong typing.",::NATURE:ChildOf:CWE ID:628:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Primary::,,,,"::PHASE:Implementation:NOTE:This problem typically occurs when the programmer makes a typo, or copy and paste errors.::",,,::SCOPE:Other:IMPACT:Quality Degradation::,,"::PHASE:Implementation:DESCRIPTION:Use the function, procedure, or routine as specified.::PHASE:Testing:DESCRIPTION:Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.::","::REFERENCE:CVE-2006-7049:DESCRIPTION:Application calls functions with arguments in the wrong order, allowing attacker to bypass intended access restrictions.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-7049::",,,,,,
