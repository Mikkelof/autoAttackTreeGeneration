CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
1332,Improper Handling of Faults that Lead to Instruction Skips,Base,Stable,The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.,"The operating conditions of hardware may change in ways that cause unexpected behavior to occur, including the skipping of security-critical CPU instructions. Generally, this can occur due to electrical disturbances or when the device operates outside of its expected conditions. In practice, application code may contain conditional branches that are security-sensitive (e.g., accepting or rejecting a user-provided password). These conditional branches are typically implemented by a single conditional branch instruction in the program binary which, if skipped, may lead to effectively flipping the branch condition - i.e., causing the wrong security-sensitive branch to be taken. This affects processes such as firmware authentication, password verification, and other security-sensitive decision points. Attackers can use fault injection techniques to alter the operating conditions of hardware so that security-critical instructions are skipped more frequently or more reliably than they would in a natural setting.",::NATURE:ChildOf:CWE ID:1384:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1247:VIEW ID:1194:ORDINAL:Primary::,::ORDINALITY:Primary::,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,,,::PHASE:Architecture and Design:NOTE:Failure to design appropriate countermeasures to common fault injection techniques can manifest this weakness.::PHASE:Implementation:NOTE:This weakness can arise if the hardware design incorrectly implements countermeasures to prevent fault injection.::,,,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Authentication:IMPACT:Bypass Protection Mechanism:IMPACT:Alter Execution Logic:IMPACT:Unexpected State:LIKELIHOOD:High:NOTE:Depending on the context, instruction skipping can have a broad range of consequences related to the generic bypassing of security critical code.::","::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.:EFFECTIVENESS:Moderate::METHOD:Simulation / Emulation:DESCRIPTION:This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:This weakness can be found using manual (static) analysis. The analyst has security objectives that are matched against the high-level code. This method is less precise than emulation, especially if the analysis is done at the higher level language rather than at assembly level.:EFFECTIVENESS:Moderate::","::PHASE:Architecture and Design:DESCRIPTION:Design strategies for ensuring safe failure if inputs, such as Vcc, are modified out of acceptable ranges.::PHASE:Architecture and Design:DESCRIPTION:Design strategies for ensuring safe behavior if instructions attempt to be skipped.::PHASE:Architecture and Design:DESCRIPTION:Identify mission critical secrets that should be wiped if faulting is detected, and design a mechanism to do the deletion.::PHASE:Implementation:DESCRIPTION:Add redundancy by performing an operation multiple times, either in space or time, and perform majority voting. Additionally, make conditional instruction timing unpredictable.::PHASE:Implementation:DESCRIPTION:Use redundant operations or canaries to detect and respond to faults.::PHASE:Implementation:DESCRIPTION:Ensure that fault mitigations are strong enough in practice. For example, a low power detection mechanism that takes 50 clock cycles to trigger at lower voltages may be an insufficient security mechanism if the instruction counter has already progressed with no other CPU activity occurring.::","::REFERENCE:CVE-2019-15894:DESCRIPTION:fault injection attack bypasses the verification mode, potentially allowing arbitrary code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-15894::",::Power::,,,::624::625::,,
