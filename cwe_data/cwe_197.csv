CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
197,Numeric Truncation Error,Base,Incomplete,Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.,"When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.",::NATURE:ChildOf:CWE ID:681:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:681:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:681:VIEW ID:1340:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:195:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:196:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:192:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:194:VIEW ID:1000::,,::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::,,,::PHASE:Implementation::,,,::SCOPE:Integrity:IMPACT:Modify Memory:NOTE:The true value of the data is lost and corrupted data is used.::,"::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.::","::REFERENCE:CVE-2020-17087:DESCRIPTION:Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-17087::REFERENCE:CVE-2009-0231:DESCRIPTION:Integer truncation of length value leads to heap-based buffer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0231::REFERENCE:CVE-2008-3282:DESCRIPTION:Size of a particular type changes for 64-bit platforms, leading to an integer truncation in document processor causes incorrect index to be generated.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3282::",,,::TAXONOMY NAME:PLOVER:ENTRY NAME:Numeric truncation error::TAXONOMY NAME:CLASP:ENTRY NAME:Truncation error::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO34-C:ENTRY NAME:Distinguish between characters read from a file and EOF or WEOF:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FLP34-C:ENTRY NAME:Ensure that floating point conversions are within range of the new type:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT02-C:ENTRY NAME:Understand integer conversion rules::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT05-C:ENTRY NAME:Do not use input functions to convert character data if they cannot handle all possible inputs::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT31-C:ENTRY NAME:Ensure that integer conversions do not result in lost or misinterpreted data:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:NUM12-J:ENTRY NAME:Ensure conversions of numeric types to narrower types do not result in lost or misinterpreted data::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::,,"::TYPE:Research Gap:NOTE:This weakness has traditionally been under-studied and under-reported, although vulnerabilities in popular software have been published in 2008 and 2009.::",
