CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
482,Comparing instead of Assigning,Variant,Draft,The code uses an operator for comparison when the intention was to perform an assignment.,"In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused.",::NATURE:ChildOf:CWE ID:480:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,,,::PHASE:Implementation:NOTE:This bug primarily originates from a typo.::,,,"::SCOPE:Availability:SCOPE:Integrity:IMPACT:Unexpected State:NOTE:The assignment will not take place, which should cause obvious program execution problems.::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::",::PHASE:Testing:DESCRIPTION:Many IDEs and static analysis products will detect this problem.::,,,,::TAXONOMY NAME:CLASP:ENTRY NAME:Comparing instead of assigning::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP2:ENTRY NAME:Unused Entities::,,,
