CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
597,Use of Wrong Operator in String Comparison,Variant,Draft,"The product uses the wrong operator when comparing a string, such as using == when the .equals() method should be used instead.","In Java, using == or != to compare two strings for equality actually compares two objects for equality rather than their string values for equality. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, the unintended comparison result could be leveraged to affect program security.",::NATURE:ChildOf:CWE ID:595:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:595:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:480:VIEW ID:1000::,,,,,::PHASE:Implementation::,,,::SCOPE:Other:IMPACT:Other::,"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:Within Java, use .equals() to compare string values. Within JavaScript, use == to compare string values. Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.):EFFECTIVENESS:High::",,,,::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:EXP03-J:ENTRY NAME:Do not use the equality operators when comparing values of boxed primitives::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:EXP03-J:ENTRY NAME:Do not use the equality operators when comparing values of boxed primitives::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:EXP35-PL:ENTRY NAME:Use the correct operator type for comparing values:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::,,,
