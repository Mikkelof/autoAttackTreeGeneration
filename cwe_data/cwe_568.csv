CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
568,finalize() Method Without super.finalize(),Variant,Draft,The product contains a finalize() method that does not call super.finalize().,The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize().,::NATURE:ChildOf:CWE ID:573:VIEW ID:1000::NATURE:ChildOf:CWE ID:459:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,,,::PHASE:Implementation::,,,::SCOPE:Other:IMPACT:Quality Degradation::,"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::",::PHASE:Implementation:DESCRIPTION:Call the super.finalize() method.::PHASE:Testing:DESCRIPTION:Use static analysis tools to spot such issues in your code.::,,,,::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:MET12-J:ENTRY NAME:Do not use finalizers::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::,,,
