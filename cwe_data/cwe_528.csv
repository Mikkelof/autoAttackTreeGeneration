CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
528,Exposure of Core Dump File to an Unauthorized Control Sphere,Variant,Draft,"The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",,::NATURE:ChildOf:CWE ID:552:VIEW ID:1000:ORDINAL:Primary::,,,,,::PHASE:Operation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::,,,::SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Read Files or Directories::,"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::",::PHASE:System Configuration:DESCRIPTION:Protect the core dump files from unauthorized access.::,,,,::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM06-C:ENTRY NAME:Ensure that sensitive data is not written out to disk::,,,
